name: Deploy to EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

concurrency:
  group: ec2-deploy
  cancel-in-progress: true

env:
  REMOTE_DIR: /home/ubuntu/M1-starter-app/backend   # remote path you want to deploy into

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Copy the current repo to the EC2 instance (into REMOTE_DIR)
      - name: Copy files to EC2
        uses: appleboy/scp-action@master
        with:
          host:     ${{ secrets.EC2_HOST }}   # e.g. ec2-54-211-166-180.compute-1.amazonaws.com
          username: ${{ secrets.EC2_USER }}   # usually "ubuntu"
          key:      ${{ secrets.EC2_KEY }}    # your private key content
          source:   "."
          target:   "${{ env.REMOTE_DIR }}"

      # SSH in: ensure Docker is available, write .env from secrets, and run Compose
      - name: SSH build & run
        uses: appleboy/ssh-action@master
        with:
          host:     ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key:      ${{ secrets.EC2_KEY }}
          script_stop: true
          script: |
            set -euo pipefail

            REMOTE_DIR="${REMOTE_DIR:-/home/ubuntu/cpen321-tutorial}"
            # If your compose/Dockerfile live in a "backend" subfolder, use it; else use repo root.
            APP_DIR="$REMOTE_DIR/backend"
            if [ -f "$REMOTE_DIR/docker-compose.yml" ] || [ -f "$REMOTE_DIR/compose.yaml" ]; then
              APP_DIR="$REMOTE_DIR"
            fi
            mkdir -p "$APP_DIR"
            cd "$APP_DIR"

            # --- Ensure Docker & Compose exist (Ubuntu) ---
            if ! command -v docker >/dev/null 2>&1; then
              sudo apt-get update -y
              sudo apt-get install -y docker.io docker-compose-plugin
              sudo systemctl enable --now docker
            fi

            # --- Write .env from GitHub Secrets (adjust as needed) ---
            cat > .env << 'EOF'
            PORT=${{ secrets.PROD_PORT }}
            HOST_PORT=${{ secrets.PROD_HOST_PORT }}
            DB_URI=${{ secrets.PROD_DB_URI }}
            EOF
            chmod 600 .env

            # --- Build & (re)start with Compose ---
            sudo docker compose down || true
            sudo docker compose --env-file .env build
            sudo docker compose --env-file .env up -d
            sudo docker compose ps
